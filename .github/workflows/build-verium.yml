name: Build Verium (0.14/0.15-style depends)

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            host: x86_64-pc-linux-gnu
          - os: windows-2022
            host: x86_64-w64-mingw32
          - os: macos-13
            host: x86_64-apple-darwin16
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # ---------- Linux ----------
      - name: Install base deps (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config automake libtool \
                                  python3 ccache curl zip unzip
      - name: Cache depends (Linux/macOS/Windows share same paths)
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: ${{ runner.os }}-${{ matrix.host }}-${{ hashFiles('depends/packages/*.mk') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.host }}-

      - name: Build depends (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          make -C depends HOST=${{ matrix.host }} -j"$(nproc || echo 2)"

      - name: Configure (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          ./autogen.sh
          export CONFIG_SITE="$(pwd)/depends/${{ matrix.host }}/share/config.site"
          ./configure \
            --prefix="$(pwd)/depends/${{ matrix.host }}" \
            --host=${{ matrix.host }} \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

      - name: Build (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: make -j"$(nproc || echo 2)"

      # ---------- macOS ----------
      - name: Install base deps (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew update
          brew install automake libtool pkg-config ccache
      - name: Build depends (macOS)
        if: startsWith(matrix.os, 'macos')
        env:
          # Adjust if your depends expects a specific target or SDK:
          MACOSX_DEPLOYMENT_TARGET: "10.13"
          SDKROOT: ${{ env.SDKROOT }}
        run: |
          # Try to locate SDK and export for consistency
          if command -v xcrun >/dev/null 2>&1; then
            export SDKROOT="$(xcrun --sdk macosx --show-sdk-path)"
          fi
          make -C depends HOST=${{ matrix.host }} -j"$(sysctl -n hw.ncpu || echo 2)"

      - name: Configure (macOS)
        if: startsWith(matrix.os, 'macos')
        env:
          MACOSX_DEPLOYMENT_TARGET: "10.13"
        run: |
          ./autogen.sh
          export CONFIG_SITE="$(pwd)/depends/${{ matrix.host }}/share/config.site"
          ./configure \
            --prefix="$(pwd)/depends/${{ matrix.host }}" \
            --host=${{ matrix.host }} \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

      - name: Build (macOS)
        if: startsWith(matrix.os, 'macos')
        run: make -j"$(sysctl -n hw.ncpu || echo 2)"

      # ---------- Windows (MSYS2) ----------
      - name: Set up MSYS2
        if: startsWith(matrix.os, 'windows')
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            base-devel
            git
            zip
            unzip
            patch
            dos2unix
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-cmake

      - name: Normalize line endings (fix CRLF in makefiles/scripts)
        if: startsWith(matrix.os, 'windows')
        shell: msys2 {0}
        run: |
          find depends -type f \( -name '*.mk' -o -name 'Makefile' -o -name '*.sh' \) -print0 | xargs -0 dos2unix || true

      - name: Sanity check POSIX tools
        if: startsWith(matrix.os, 'windows')
        shell: msys2 {0}
        run: |
          uname -a
          command -v make; command -v sed; command -v cut; command -v sha256sum
          gcc --version
          g++ --version

      - name: Build depends (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: msys2 {0}
        run: |
          make -C depends HOST=${{ matrix.host }} -j"$(nproc || echo 2)"

      - name: Configure (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: msys2 {0}
        run: |
          ./autogen.sh
          export CONFIG_SITE="$PWD/depends/${{ matrix.host }}/share/config.site"
          ./configure \
            --prefix="$PWD/depends/${{ matrix.host }}" \
            --host=${{ matrix.host }} \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

      - name: Build (Windows)
        if: startsWith(matrix.os, 'windows')
        shell: msys2 {0}
        run: make -j"$(nproc || echo 2)"

      # ---------- Package ----------
      - name: Collect artifacts
        shell: bash
        run: |
          mkdir -p out
          cp src/veriumd* out/ 2>/dev/null || true
          cp src/verium-cli* out/ 2>/dev/null || true
          cp src/qt/verium-qt* out/ 2>/dev/null || true
          if [ -z "$(ls -A out)" ]; then
            echo "No binaries found in 'out' (check paths)"; exit 1
          fi
          if [[ "${{ matrix.os }}" == "windows-2022" ]]; then
            # Use zip (available in MSYS2) instead of 7z
            /usr/bin/env bash -lc 'cd out && zip -r ../verium-${{ matrix.host }}.zip .'
          else
            tar -czf verium-${{ matrix.host }}.tar.gz -C out .
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: verium-${{ matrix.host }}
          path: |
            verium-${{ matrix.host }}.tar.gz
            verium-${{ matrix.host }}.zip
          if-no-files-found: ignore
