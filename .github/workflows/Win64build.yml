name: Build Verium (Windows x86_64 â€¢ old-style)

on:
  workflow_dispatch:
    inputs:
      depends_target:
        description: "Optional: build only this depends pkg first (e.g., curl, openssl). Leave empty for full depends."
        required: false
        default: ""
      verbose_make:
        description: "Verbose make output (V=1)"
        required: false
        default: "false"

concurrency:
  group: verium-global
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  HOST_TRIPLET: x86_64-w64-mingw32

jobs:
  win64:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout (master)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Base deps + MinGW toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config python3 \
            g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 \
            curl zip unzip ccache

      - name: Cache depends (sources + built)
        uses: actions/cache@v4
        with:
          path: |
            depends/sources
            depends/built
          key: win-${{ env.HOST_TRIPLET }}-${{ hashFiles('depends/packages/*.mk') }}
          restore-keys: |
            win-${{ env.HOST_TRIPLET }}-

      # --- cURL cross-compile fix (no perl/heredoc) ---
      - name: Patch curl.mk for MinGW (avoid AC_RUN; prefer WinSSL)
        run: |
          set -e
          f=depends/packages/curl.mk
          if [ -f "$f" ]; then
            if ! grep -q 'config_opts_mingw64.*with-winssl' "$f"; then
              {
                echo ''
                echo '# MinGW cross-friendly opts (added by CI)'
                echo '$(package)_config_opts += --disable-debug --disable-curldebug --disable-ldap --disable-ldaps --without-libidn2 --without-libpsl --without-brotli --without-zstd --without-nghttp2 --without-ssh --without-libssh2 --without-rtmp'
                echo '$(package)_config_opts_mingw32 += --with-winssl'
                echo '$(package)_config_opts_mingw64 += --with-winssl'
                echo '$(package)_conf_env += ac_cv_func_strerror_r=no ac_cv_strerror_r_char_p=no ac_cv_func_clock_gettime=no'
              } >> "$f"
            fi
          fi

      # --- Qt 5.9.8 fix: add <limits> include via proper patch, register in qt.mk ---
      - name: Patch Qt 5.9.8 for modern GCC (add <limits>)
        run: |
          set -e
          mkdir -p depends/patches/qt
          PATCHFILE=depends/patches/qt/0001-qbytearraymatcher-include-limits.patch

          # Write the patch safely (no heredoc)
          printf '%s\n' \
'--- a/qtbase/src/corelib/tools/qbytearraymatcher.h' \
'+++ b/qtbase/src/corelib/tools/qbytearraymatcher.h' \
'@@ -40,6 +40,7 @@' \
'#include <QtCore/qbytearray.h>' \
'#include <QtCore/qstring.h>' \
'#include <QtCore/qvarlengtharray.h>' \
'+#include <limits>' \
'' \
'QT_BEGIN_NAMESPACE' \
> "$PATCHFILE"

          # Register the patch in qt.mk if not already present
          qtmk=depends/packages/qt.mk
          if [ -f "$qtmk" ] && ! grep -q '0001-qbytearraymatcher-include-limits.patch' "$qtmk"; then
            printf '\n$(package)_patches += 0001-qbytearraymatcher-include-limits.patch\n' >> "$qtmk"
          fi

          # Ensure a fresh Qt extract so the patch will apply (cache may hold preprocessed tree)
          rm -rf depends/work/build/*/qt/

          # Debug visibility
          echo "Registered patch in $qtmk (grep check):"
          grep -n 'qbytearraymatcher-include-limits.patch' "$qtmk" || true
          echo "Patch file preview:"
          sed -n '1,20p' "$PATCHFILE"

      - name: Build depends (Win64)
        run: |
          set -e
          export RC=${HOST_TRIPLET}-windres
          export WINDRES=${HOST_TRIPLET}-windres

          # Opt
::contentReference[oaicite:0]{index=0}
