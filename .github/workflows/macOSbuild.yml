name: Build Verium (macOS x86_64 â€¢ depends)

on:
  workflow_dispatch:
    inputs:
      target_ref:
        description: "Branch/Tag/SHA to build"
        required: true
        default: "Verium-1.3.5"
      depends_target:
        description: "Optional: build only this depends pkg first (e.g., boost, openssl). Leave empty for full depends."
        required: false
        default: ""
      verbose_make:
        description: "Verbose make output (V=1)"
        required: false
        default: "false"

concurrency:
  group: verium-macos
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  # Standard Bitcoin Core-style darwin triplet for x86_64
  HOST_TRIPLET: x86_64-apple-darwin14

jobs:
  macos64:
    # Intel runner; use macos-14 if/when you want Apple Silicon
    runs-on: self-hosted
    env:
      HOST_TRIPLET: x86_64-apple-darwin14

    steps:
      - name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Show toolchain info
        run: |
          set -euo pipefail
          echo "Dev dir: $(xcode-select -p || true)"
          if xcrun -f xcodebuild >/dev/null 2>&1; then
           xcodebuild -version
          else
            echo "Full Xcode not installed; proceeding with Command Line Tools."
          fi
          clang --version || true
          sw_vers

      - name: Base build deps (host)
        run: |
          set -euo pipefail
          # Keep Homebrew output quiet but reliable
          brew update -q
          # Core utils commonly needed by depends/autotools
          brew install -q automake libtool pkg-config coreutils gnu-getopt gnu-tar
          # Ensure GNU getopt is used (some projects rely on it)
          echo "$(brew --prefix)/opt/gnu-getopt/bin" >> $GITHUB_PATH
          echo "$(brew --prefix)/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
          brew install cmake
        

      - name: Export macOS build env
        run: |
          set -euo pipefail
          # Prefer clang/clang++ explicitly
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CPP=clang -E" >> $GITHUB_ENV
          echo "AR=ar" >> $GITHUB_ENV
          echo "RANLIB=ranlib" >> $GITHUB_ENV
          echo "NM=nm" >> $GITHUB_ENV

          # Point to current SDK so configure scripts don't guess wrong
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path 2>/dev/null || echo /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

          # A reasonable minimum; depends may enforce its own min-version too
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

      - name: Build depends (macOS)
        run: |
          set -e
          CORES="$(sysctl -n hw.logicalcpu || echo 2)"

          # Optional priming of a single depends pkg
          if [ -n "${{ inputs.depends_target }}" ]; then
            echo "Priming depends target: ${{ inputs.depends_target }}"
            make -C depends HOST=${HOST_TRIPLET} CC=clang CXX=clang++ \
              ${{ inputs.depends_target }} -j"$CORES"
          fi

          # Full depends build
          make -C depends HOST=${HOST_TRIPLET} CC=clang CXX=clang++ -j"$CORES" || {
            echo "---- tail any config.log ----"
            find depends/work/build -name config.log -exec sh -c 'echo "==> {}"; tail -n 120 "{}"' \;
            exit 1
          }

      - name: Force C++11 everywhere (wrappers)
        run: |
          set -euo pipefail
          WRAP="$PWD/.ccwrap"
          mkdir -p "$WRAP"

          cat > "$WRAP/clang++" <<'EOF'
          #!/usr/bin/env bash
          real="$(xcrun -f clang++)"
          has_std=0; has_stdlib=0; has_min=0
          for a in "$@"; do
            [[ "$a" == -std=* ]] && has_std=1
            [[ "$a" == -stdlib=* ]] && has_stdlib=1
            [[ "$a" == -mmacosx-version-min=* ]] && has_min=1
          done
          extras=()
          [[ $has_std -eq 0    ]] && extras+=("-std=c++11")
          [[ $has_stdlib -eq 0 ]] && extras+=("-stdlib=libc++")
          [[ $has_min -eq 0    ]] && extras+=("-mmacosx-version-min=${MACOSX_DEPLOYMENT_TARGET:-10.13}")
          exec "$real" "${extras[@]}" "$@"
          EOF
          chmod +x "$WRAP/clang++"

          # Also catch 'c++' and 'g++' calls that ignore $(CXX)
          ln -sf ./clang++ "$WRAP/c++"
          ln -sf ./clang++ "$WRAP/g++"

          # Put wrappers first on PATH
          echo "$WRAP" >> "$GITHUB_PATH"

      
      - name: Configure (macOS)
        run: |
          set -e
          ./autogen.sh

          export CONFIG_SITE="$(pwd)/depends/${HOST_TRIPLET}/share/config.site"
          DEP="$(pwd)/depends/${HOST_TRIPLET}"
          : "${MACOSX_DEPLOYMENT_TARGET:=10.13}"

          # fresh probe results (old 'no' gets cached)
          rm -f config.cache

          # Ensure our depends paths are first
          export BOOST_CPPFLAGS="-I$DEP/include"
          export BOOST_LDFLAGS="-L$DEP/lib"

          # Compile flags for probes (add the MPL workaround; keep min macOS)
          export CPPFLAGS="$BOOST_CPPFLAGS ${CPPFLAGS:-} -DBOOST_MPL_CFG_NO_NESTED_VALUE_ARITHMETIC -D_LIBCPP_DISABLE_AVAILABILITY"
          export LDFLAGS="$BOOST_LDFLAGS ${LDFLAGS:-}"

          # Detect Boost static suffix produced by depends (e.g., -mt-x64)
          bs="$(ls "$DEP/lib"/libboost_system*.a | head -n1 || true)"
          if [ -z "$bs" ]; then
            echo "ERROR: No libboost_system*.a found in $DEP/lib (did depends/boost build?)."
            ls -l "$DEP/lib" || true
            exit 1
          fi
          suf="${bs##*/}"; suf="${suf#libboost_system}"; suf="${suf%.a}"
          export BOOST_LIB_SUFFIX="$suf"
          export BOOST_THREAD_LIB_SUFFIX="$suf"
          echo "Using BOOST_LIB_SUFFIX='$BOOST_LIB_SUFFIX'"

          # Select compilers first
          export CC=clang
          export CXX=clang++

          # Toolchain flags for configure tests (compile + link)
          export CFLAGS="${CFLAGS:-} -mmacosx-version-min=${MACOSX_DEPLOYMENT_TARGET} -pthread"
          export CXXFLAGS="${CXXFLAGS:-} -stdlib=libc++ -mmacosx-version-min=${MACOSX_DEPLOYMENT_TARGET} -pthread -Wno-deprecated-declarations -Wno-enum-constexpr-conversion"
          export OBJCXXFLAGS="$CXXFLAGS"
          
          # Tell the boost.m4 probes exactly which libs to link (and in what order)
          export BOOST_THREAD_LIB="-lboost_thread${BOOST_LIB_SUFFIX}"
          export BOOST_CHRONO_LIB="-lboost_chrono${BOOST_LIB_SUFFIX}"
          export BOOST_SYSTEM_LIB="-lboost_system${BOOST_LIB_SUFFIX}"

          # Make sure the link test pulls pthread, too
          export LIBS="$BOOST_THREAD_LIB $BOOST_CHRONO_LIB $BOOST_SYSTEM_LIB -lpthread ${LIBS:-}"

          # Configure with Qt from depends
          ./configure \
            --host=${HOST_TRIPLET} \
            --prefix="$DEP" \
            --with-gui=qt5 \
            --with-qt-bindir="$DEP/native/bin" \
            --with-qt-incdir="$DEP/include" \
            --with-qt-libdir="$DEP/lib" \
            --with-boost="$DEP" \
            --with-boost-libdir="$DEP/lib" \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

           # Persist critical flags for the next "Build" step
          {
            echo "CC=$CC"
            echo "CXX=$CXX"
            echo "CFLAGS=$CFLAGS"
            echo "CXXFLAGS=$CXXFLAGS"
            echo "OBJCXXFLAGS=$OBJCXXFLAGS"
            echo "CPPFLAGS=$CPPFLAGS"
            echo "LDFLAGS=$LDFLAGS"
            echo "LIBS=$LIBS"
          } >> "$GITHUB_ENV"

      - name: Build (macOS)
        run: |
          set -e
          # one run with V=1 to confirm every clang++ line shows -std=c++11 (wrapper will add it)
          make CC="$CC" CXX="$CXX" -j"$(sysctl -n hw.logicalcpu || echo 2)" V=1
          CORES="$(sysctl -n hw.logicalcpu || echo 2)"
          if [ "${{ inputs.verbose_make }}" = "true" ]; then
            make CC="$CC" CXX="$CXX" -j"$CORES" V=1
          else
            make CC="$CC" CXX="$CXX" -j"$CORES"
          fi

      - name: Package + checksums (macOS)
        run: |
          set -euo pipefail
          V=$(git describe --tags --dirty --always || echo untagged)
          OUTDIR="out-macos"
          mkdir -p "$OUTDIR"
          # CLI/daemon
          cp -f src/verium* "$OUTDIR/" 2>/dev/null || true
          # Qt app bundle or binary
          cp -f src/qt/verium* "$OUTDIR/" 2>/dev/null || true

          if [ -z "$(ls -A "$OUTDIR" 2>/dev/null)" ]; then
            echo "No macOS binaries found in $OUTDIR; exiting."
            exit 2
          fi

          PKG="verium-${V}-${HOST_TRIPLET}.tar.gz"
          # Use GNU tar to avoid BSD tar quirks
          gtar -C "$OUTDIR" -czf "$PKG" .
          shasum -a 256 "$PKG" > "${PKG}.SHA256SUMS"

          echo "ART_MAIN=$PKG" >> $GITHUB_ENV
          echo "ART_SUMS=${PKG}.SHA256SUMS" >> $GITHUB_ENV

      - name: Upload artifacts (binaries + checksums)
        uses: actions/upload-artifact@v4
        with:
          name: macos64-${{ env.HOST_TRIPLET }}
          path: |
            ${{ env.ART_MAIN }}
            ${{ env.ART_SUMS }}

      - name: Upload build logs (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macos-dep-logs
          path: |
            depends/work/build/**/config.log
            depends/work/build/**/config.status
          if-no-files-found: ignore

