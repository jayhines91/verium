name: Build Verium (Linux x86_64 â€¢ depends)

on:
  workflow_dispatch:
    inputs:
      target_ref:
        description: "Branch/Tag/SHA to build"
        required: true
        default: "Verium-1.3.5"
      depends_target:
        description: "Optional: build only this depends pkg first (e.g., boost, openssl). Leave empty for full depends."
        required: false
        default: ""
      verbose_make:
        description: "Verbose make output (V=1)"
        required: false
        default: "false"

concurrency:
  group: verium-linux
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  HOST_TRIPLET: x86_64-pc-linux-gnu

jobs:
  linux64:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Purge Boost workdir
        run: rm -rf depends/work/build/*/boost/

      - name: Boost generate headers before building
        run: |
          set -euo pipefail
          f=depends/packages/boost.mk
          test -f "$f"

          # Register only the predef-tools disable patch
          if ! grep -q 'disable-predef-tools-check.patch' "$f"; then
            echo '' >> "$f"
            echo '$(package)_patches += disable-predef-tools-check.patch' >> "$f"
          fi

          # Stage headers before building (helps the config/predef checks that remain)
          if ! grep -q 'b2 headers' "$f"; then
            printf '\n# stage headers before building\n' >> "$f"
            echo '$$(package)_configure_cmds += ./b2 headers' >> "$f"
          fi

          # (Optional) keep builds tight to only needed libs
          if ! grep -q -- '--with-libraries=' "$f"; then
            echo '$$(package)_build_opts += --with-libraries=chrono,filesystem,system,thread,test' >> "$f"
          fi

          echo "==== tail of boost.mk ===="
          tail -n 80 "$f"
    

      - name: Base build deps (host)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config python3 \
            gcc-9 g++-9 \
            curl zip unzip ccache

          # Make gcc-9/g++-9 the system default for this job
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 100
          gcc --version; g++ --version

      - name: Cache compiled depends
        id: cache-depends
        uses: actions/cache@v4
        with:
          path: depends/built
          key: depends-${{ runner.os }}-${{ env.HOST_TRIPLET }}-gcc9-boost-predefskip-v1-${{ hashFiles('depends/packages/*.mk','depends/patches/boost/*.patch') }}


 
      - name: Build depends (Linux)
        if: steps.cache-depends.outputs.cache-hit != 'true'
        run: |
          set -e
          export CC=gcc-9 CXX=g++-9
          if [ -n "${{ inputs.depends_target }}" ]; then
            echo "Priming depends target: ${{ inputs.depends_target }}"
            make -C depends HOST=${HOST_TRIPLET} CC_FOR_BUILD=gcc-9 CXX_FOR_BUILD=g++-9 \
              ${{ inputs.depends_target }} -j"$(nproc || echo 2)"
          fi

          make -C depends HOST=${HOST_TRIPLET} CC_FOR_BUILD=gcc-9 CXX_FOR_BUILD=g++-9 \
            -j"$(nproc || echo 2)" || {
              echo "---- tail any config.log ----"
              find depends/work/build -name config.log -exec sh -c 'echo "==> {}"; tail -n 120 "{}"' \;
              exit 1
            }

      - name: Configure (Linux)
        run: |
          set -e
          ./autogen.sh
          export CC=gcc-9 CXX=g++-9
          export CONFIG_SITE="$(pwd)/depends/${HOST_TRIPLET}/share/config.site"
          DEP="$(pwd)/depends/${HOST_TRIPLET}"

          ./configure \
            --host=${HOST_TRIPLET} \
            --prefix="$DEP" \
            --with-gui=qt5 \
            --with-qt-bindir="$DEP/native/bin" \
            --with-qt-incdir="$DEP/include" \
            --with-qt-libdir="$DEP/lib" \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

      - name: Build (Linux)
        run: |
          set -e
          if [ "${{ inputs.verbose_make }}" = "true" ]; then
            make -j"$(nproc || echo 2)" V=1
          else
            make -j"$(nproc || echo 2)"
          fi

      - name: Package + checksums (Linux)
        run: |
          set -euo pipefail
          V=$(git describe --tags --dirty --always || echo untagged)
          OUTDIR="out-linux"
          mkdir -p "$OUTDIR"

          # Collect typical outputs (daemon/CLI/qt). Adjust names if the repo differs.
          cp -f src/verium* "$OUTDIR/" 2>/dev/null || true
          cp -f src/qt/verium* "$OUTDIR/" 2>/dev/null || true

          # Make sure we actually have ELF binaries
          if [ -z "$(ls -A "$OUTDIR" 2>/dev/null)" ]; then
            echo "No Linux binaries found in $OUTDIR; exiting."
            exit 2
          fi

          PKG="verium-${V}-${HOST_TRIPLET}.tar.gz"
          tar -C "$OUTDIR" -czf "$PKG" .
          sha256sum "$PKG" > "${PKG}.SHA256SUMS"
          echo "ART_MAIN=$PKG" >> $GITHUB_ENV
          echo "ART_SUMS=${PKG}.SHA256SUMS" >> $GITHUB_ENV

      - name: Upload artifacts (binaries + checksums)
        uses: actions/upload-artifact@v4
        with:
          name: linux64-${{ env.HOST_TRIPLET }}
          path: |
            ${{ env.ART_MAIN }}
            ${{ env.ART_SUMS }}

      - name: Upload build logs (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux-dep-logs
          path: |
            depends/work/build/**/config.log
            depends/work/build/**/config.status
          if-no-files-found: ignore
