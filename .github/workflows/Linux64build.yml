name: Build Verium (Linux x86_64 • old-style • GCC 9)

on:
  workflow_dispatch:
    inputs:
      target_ref:
        description: "Branch/Tag/SHA to build"
        required: true
        default: "master"
      depends_target:
        description: "Optional: build only this depends pkg first (e.g., curl, openssl). Leave empty for full depends."
        required: false
        default: ""
      verbose_make:
        description: "Verbose make output (V=1)"
        required: false
        default: "false"

concurrency:
  group: verium-global
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  HOST_TRIPLET: x86_64-pc-linux-gnu

jobs:
  linux64:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Reset boost.mk (remove any prior injections)
        run: |
          set -euo pipefail
          if git ls-files --error-unmatch depends/packages/boost.mk >/dev/null 2>&1; then
            git checkout -- depends/packages/boost.mk
          fi

      - name: Add Boost pthread patch + b2 flags (single source of truth)
        run: |
          set -euo pipefail

          # 1) Create a proper patch that guards PTHREAD_STACK_MIN in Boost 1.70
          mkdir -p depends/patches/boost
          cat > depends/patches/boost/boost-1_70-pthread-stack-min-guard.patch << 'PATCH'
          *** a/boost/thread/pthread/thread_data.hpp
          --- b/boost/thread/pthread/thread_data.hpp
          ***************
          *** 57,66 ****
            //  make_pthread_mutex() if BOOST_THREAD_PROVIDES_GENERIC_SHARED_MUTEX_ON_WIN is defined.
            //  For other compilers/platforms we don't know a way to get it, so we use
            //  a default value: 1MiB.
            //  Note: PTHREAD_STACK_MIN is an optional feature and may be undefined.
            //  See: https://pubs.opengroup.org/onlinepubs/9699919799/
          ! #if PTHREAD_STACK_MIN > 0
          ! #define BOOST_THREAD_PTHREAD_STACK_MIN PTHREAD_STACK_MIN
          ! #else
          ! #define BOOST_THREAD_PTHREAD_STACK_MIN (1024*1024)
          ! #endif
          --- 57,68 ----
            //  make_pthread_mutex() if BOOST_THREAD_PROVIDES_GENERIC_SHARED_MUTEX_ON_WIN is defined.
            //  For other compilers/platforms we don't know a way to get it, so we use
            //  a default value: 1MiB.
            //  Note: PTHREAD_STACK_MIN is an optional feature and may be undefined.
            //  See: https://pubs.opengroup.org/onlinepubs/9699919799/
          + #if defined(PTHREAD_STACK_MIN) && (PTHREAD_STACK_MIN > 0)
          + #define BOOST_THREAD_PTHREAD_STACK_MIN PTHREAD_STACK_MIN
          + #else
          + #define BOOST_THREAD_PTHREAD_STACK_MIN (1024*1024)
          + #endif
          PATCH

          # 2) Teach depends/boost to apply the patch and inject GCC cxxflags into Boost's project-config.jam
          f=depends/packages/boost.mk
          test -f "$f"

          # Append our patch reference in the canonical way
          echo '' >> "$f"
          echo '# CI inject: guard PTHREAD_STACK_MIN in Boost 1.70 pthread header' >> "$f"
          echo '$$(package)_patches += boost-1_70-pthread-stack-min-guard.patch' >> "$f"

          # After bootstrap generates project-config.jam, append a "using gcc" line
          # that adds robust pthread/gnu flags and a safe default for PTHREAD_STACK_MIN.
          # This is the knob Boost.Build actually reads for all compilations.
          cat >> "$f" << 'EOF'
          # CI inject: add global cxxflags for gcc in project-config.jam
          $$(package)_configure_cmds += echo 'using gcc : : g++ : <cxxflags>-D_GNU_SOURCE -DBOOST_THREAD_USES_PTHREAD -DPTHREAD_STACK_MIN=16384 ;' >> $($$(package)_build_subdir)/project-config.jam
          EOF

          echo "==== tail of boost.mk (verification) ===="
          tail -n 80 "$f"

      - name: Purge Boost workdir (force rebuild with new patch/flags)
        run: |
          set -euo pipefail
          rm -rf depends/work/build/*/boost/




      - name: Base build deps (native Linux)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config python3 \
            curl zip unzip ccache bison flex

      - name: Install GCC 9 (host) and select it
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y gcc-9 g++-9
          # Make gcc-9/g++-9 the system default to avoid surprises
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 100
          gcc --version
          g++ --version

      - name: Cache compiled depends
        id: cache-depends
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/${{ env.HOST_TRIPLET }}
          key: depends-${{ runner.os }}-${{ env.HOST_TRIPLET }}-gcc9-1-2${{ hashFiles('depends/packages/*.mk') }}

      # (Optional) Initialize Qt automake vars if older trees rely on '+='
      - name: Initialize Qt automake vars (fix '+=' error)
        run: |
          set -e
          f=src/Makefile.qt.include
          if [ -f "$f" ]; then
            grep -q '^[[:space:]]*LIBBITCOINQT_LIBS[[:space:]]*=' "$f" || \
              sed -i '1i LIBBITCOINQT_LIBS =\nLIBBITCOINQT_INCLUDES =' "$f"
            echo "Patched $f:"
            head -n 8 "$f" || true
          else
            echo "NOTE: $f not found (skipping)."
          fi

      - name: Build depends (Linux, GCC 9)
        if: steps.cache-depends.outputs.cache-hit != 'true'
        env:
          CC_FOR_BUILD: gcc-9
          CXX_FOR_BUILD: g++-9
        run: |
          set -e
          if [ -n "${{ inputs.depends_target }}" ]; then
            echo "Priming depends target: ${{ inputs.depends_target }}"
            make -C depends HOST=${HOST_TRIPLET} ${{ inputs.depends_target }} -j"$(nproc || echo 2)"
          fi

          make -C depends HOST=${HOST_TRIPLET} -j"$(nproc || echo 2)" || {
            echo "---- tail any config.log ----"
            find depends/work/build -name config.log -exec sh -c 'echo "==> {}"; tail -n 120 "{}"' \;
            exit 1
          }

      - name: Autogen & Configure (Linux, GCC 9)
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          set -e
          ./autogen.sh
          export CONFIG_SITE="$(pwd)/depends/${HOST_TRIPLET}/share/config.site"
          DEP="$(pwd)/depends/${HOST_TRIPLET}"

          ./configure \
            --host=${HOST_TRIPLET} \
            --prefix="$DEP" \
            --with-gui=qt5 \
            --with-qt-bindir="$DEP/native/bin" \
            --with-qt-incdir="$DEP/include" \
            --with-qt-libdir="$DEP/lib" \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

      - name: Build (Linux, GCC 9)
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          set -e
          if [ "${{ inputs.verbose_make }}" = "true" ]; then
            make -j"$(nproc || echo 2)" V=1
          else
            make -j"$(nproc || echo 2)"
          fi

      - name: Collect & strip binaries
        run: |
          set -e
          mkdir -p out
          cp -f src/veriumd out/ 2>/dev/null || true
          cp -f src/verium-cli out/ 2>/dev/null || true
          cp -f src/qt/verium-qt out/ 2>/dev/null || true

          if [ -z "$(ls -A out)" ]; then
            echo "No Linux binaries found in expected locations."
            find src -maxdepth 2 -type f -perm -111 -printf '%P\n' || true
            exit 2
          fi

          strip --strip-unneeded out/* || true

      - name: Package + checksums (Linux)
        run: |
          set -euo pipefail
          V=$(git describe --tags --dirty --always || echo untagged)
          PKG="verium-${V}-${HOST_TRIPLET}.tar.gz"
          tar -C out -czf "$PKG" .
          sha256sum "$PKG" > "${PKG}.SHA256SUMS"
          echo "ART_MAIN=$PKG" >> $GITHUB_ENV
          echo "ART_SUMS=${PKG}.SHA256SUMS" >> $GITHUB_ENV

      - name: Upload artifacts (binaries + checksums)
        uses: actions/upload-artifact@v4
        with:
          name: linux64-${{ env.HOST_TRIPLET }}-gcc9
          path: |
            ${{ env.ART_MAIN }}
            ${{ env.ART_SUMS }}

      - name: Upload build logs (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux64-dep-logs
          path: |
            depends/work/build/**/config.log
            depends/work/build/**/config.status
          if-no-files-found: ignore
