name: Build Verium (Linux x86_64 • old-style • GCC 9)

on:
  workflow_dispatch:
    inputs:
      target_ref:
        description: "Branch/Tag/SHA to build"
        required: true
        default: "master"
      depends_target:
        description: "Optional: build only this depends pkg first (e.g., curl, openssl). Leave empty for full depends."
        required: false
        default: ""
      verbose_make:
        description: "Verbose make output (V=1)"
        required: false
        default: "false"

concurrency:
  group: verium-global
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  HOST_TRIPLET: x86_64-pc-linux-gnu

jobs:
  linux64:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout target ref
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.target_ref }}
          submodules: recursive
          fetch-depth: 0

      - name: Force Boost b2 to define PTHREAD_STACK_MIN (and pthread flags)
        run: |
          set -euo pipefail
          f=depends/packages/boost.mk
          test -f "$f"

          # Ensure Boost gets our flags via b2 (this is what b2 actually reads)
          {
            echo ''
            echo '# CI inject: robust pthread flags for Boost on Linux (GCC 9)'
            echo '$$(package)_build_opts += cxxflags="-D_GNU_SOURCE -DBOOST_THREAD_USES_PTHREAD -DPTHREAD_STACK_MIN=16384"'
            echo '$$(package)_build_opts += cflags="-D_GNU_SOURCE -DPTHREAD_STACK_MIN=16384"'
          } >> "$f"

      - name: Guard PTHREAD_STACK_MIN in Boost header + clear old Boost workdir
        run: |
          set -euo pipefail
          srcdir="depends/work/build/x86_64-pc-linux-gnu/boost"
          # If a previous attempt has already unpacked Boost, patch in-place too.
          if compgen -G "$srcdir" >/dev/null 2>&1; then
            find "$srcdir" -type f -name thread_data.hpp -path "*/boost/*" -print0 | \
              xargs -0 -r sed -i 's/^#if PTHREAD_STACK_MIN > 0/#if defined(PTHREAD_STACK_MIN) \&\& (PTHREAD_STACK_MIN > 0)/'
          fi

          # Also patch at unpack time by teaching boost.mk to run sed after extract.
          f=depends/packages/boost.mk
          awk '
            BEGIN{added=0}
            {print}
            END{
              print "";
              print "# CI inject: guard PTHREAD_STACK_MIN in Boost 1.70 header at preprocess step'";
              print "$$(package)_preprocess_cmds += \\";
              print "  sed -i '"'"'s/^#if PTHREAD_STACK_MIN > 0/#if defined(PTHREAD_STACK_MIN) \&\& (PTHREAD_STACK_MIN > 0)/'"'"' \\";
              print "  $($(package)_srcdir)/boost/thread/pthread/thread_data.hpp";
            }
          ' "$f" > "$f.new" && mv "$f.new" "$f"

          # Wipe any previous Boost build to avoid stale objects missing our flags
          rm -rf depends/work/build/*/boost/


      - name: Base build deps (native Linux)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            build-essential automake libtool pkg-config python3 \
            curl zip unzip ccache bison flex

      - name: Install GCC 9 (host) and select it
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y gcc-9 g++-9
          # Make gcc-9/g++-9 the system default to avoid surprises
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 100
          gcc --version
          g++ --version

      - name: Cache compiled depends
        id: cache-depends
        uses: actions/cache@v4
        with:
          path: |
            depends/built
            depends/${{ env.HOST_TRIPLET }}
          key: depends-${{ runner.os }}-${{ env.HOST_TRIPLET }}-gcc9-1${{ hashFiles('depends/packages/*.mk') }}

      # (Optional) Initialize Qt automake vars if older trees rely on '+='
      - name: Initialize Qt automake vars (fix '+=' error)
        run: |
          set -e
          f=src/Makefile.qt.include
          if [ -f "$f" ]; then
            grep -q '^[[:space:]]*LIBBITCOINQT_LIBS[[:space:]]*=' "$f" || \
              sed -i '1i LIBBITCOINQT_LIBS =\nLIBBITCOINQT_INCLUDES =' "$f"
            echo "Patched $f:"
            head -n 8 "$f" || true
          else
            echo "NOTE: $f not found (skipping)."
          fi

      - name: Build depends (Linux, GCC 9)
        if: steps.cache-depends.outputs.cache-hit != 'true'
        env:
          CC_FOR_BUILD: gcc-9
          CXX_FOR_BUILD: g++-9
        run: |
          set -e
          if [ -n "${{ inputs.depends_target }}" ]; then
            echo "Priming depends target: ${{ inputs.depends_target }}"
            make -C depends HOST=${HOST_TRIPLET} ${{ inputs.depends_target }} -j"$(nproc || echo 2)"
          fi

          make -C depends HOST=${HOST_TRIPLET} -j"$(nproc || echo 2)" || {
            echo "---- tail any config.log ----"
            find depends/work/build -name config.log -exec sh -c 'echo "==> {}"; tail -n 120 "{}"' \;
            exit 1
          }

      - name: Autogen & Configure (Linux, GCC 9)
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          set -e
          ./autogen.sh
          export CONFIG_SITE="$(pwd)/depends/${HOST_TRIPLET}/share/config.site"
          DEP="$(pwd)/depends/${HOST_TRIPLET}"

          ./configure \
            --host=${HOST_TRIPLET} \
            --prefix="$DEP" \
            --with-gui=qt5 \
            --with-qt-bindir="$DEP/native/bin" \
            --with-qt-incdir="$DEP/include" \
            --with-qt-libdir="$DEP/lib" \
            --disable-bench --disable-tests \
            --enable-reduce-exports \
            --disable-shared --enable-static

      - name: Build (Linux, GCC 9)
        env:
          CC: gcc-9
          CXX: g++-9
        run: |
          set -e
          if [ "${{ inputs.verbose_make }}" = "true" ]; then
            make -j"$(nproc || echo 2)" V=1
          else
            make -j"$(nproc || echo 2)"
          fi

      - name: Collect & strip binaries
        run: |
          set -e
          mkdir -p out
          cp -f src/veriumd out/ 2>/dev/null || true
          cp -f src/verium-cli out/ 2>/dev/null || true
          cp -f src/qt/verium-qt out/ 2>/dev/null || true

          if [ -z "$(ls -A out)" ]; then
            echo "No Linux binaries found in expected locations."
            find src -maxdepth 2 -type f -perm -111 -printf '%P\n' || true
            exit 2
          fi

          strip --strip-unneeded out/* || true

      - name: Package + checksums (Linux)
        run: |
          set -euo pipefail
          V=$(git describe --tags --dirty --always || echo untagged)
          PKG="verium-${V}-${HOST_TRIPLET}.tar.gz"
          tar -C out -czf "$PKG" .
          sha256sum "$PKG" > "${PKG}.SHA256SUMS"
          echo "ART_MAIN=$PKG" >> $GITHUB_ENV
          echo "ART_SUMS=${PKG}.SHA256SUMS" >> $GITHUB_ENV

      - name: Upload artifacts (binaries + checksums)
        uses: actions/upload-artifact@v4
        with:
          name: linux64-${{ env.HOST_TRIPLET }}-gcc9
          path: |
            ${{ env.ART_MAIN }}
            ${{ env.ART_SUMS }}

      - name: Upload build logs (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linux64-dep-logs
          path: |
            depends/work/build/**/config.log
            depends/work/build/**/config.status
          if-no-files-found: ignore
